%\usepackage{fancybox}
%\usepackage{amsmath}

\makeatletter
\def\idxexample#1{\nwix@id@uses#1}
\makeatother

\section{Problem description}
A message containing letters from A-Z is being encoded to numbers using the following mapping:

\begin{tabular}{lll}
'A' & $\rightarrow$ & 1 \\
'B' & $\rightarrow$ & 2 \\
... \\
'Z' & $\rightarrow$ & 26
\end{tabular} \\
Given a non-empty string containing only digits, determine the total number of ways to decode it.

\subsection{Examples}
Example 1:

\fbox{
    \begin{tabular}{l}
        Input: ``12" \\
        Output: 2 \\
        Explanation: It could be decoded as ``AB" (1 2) or ``L" (12).
    \end{tabular}
}
\newline
\newline
Example 2:

\fbox{
    \begin{tabular}{l}
        Input: ``226" \\
        Output: 3 \\
        Explanation: It could be decoded as ``BZ" (2 26), ``VF" (22 6), or ``BBF" (2 2 6).
    \end{tabular}
}

\section{Solution}
Let $f(s[n:])$ be the number of ways to decode the string [[s]] starting from the
index [[n]] to the end. If s[n] is ``1", then we have two ways to interpret it:
(1) interpret it as ``A"; (2) together with s[n+1], interpret it as another
character. If s[n] is ``2'', and $1<=s[n+1]<=6$, then we have two ways to
interpret it: (1) interpret it as ``B"; (2) together with s[n+1], interpret it
as another character. If s[n] is ``2", s[n+1] is ``0", we can only interpret
them together as ``T". If s[n] is ``2", $s[n+1]>6$, we can only interpret s[n]
alone as ``B". If s[n] is any other digit, we can only interpret s[n] alone.

Thus, we have the following recursive way to define $f(s[n:])$
\begin{equation} {}
f(s[n:]) = \begin{cases}
            f(s[n+1:]) + f(s[n+2:]) & \text{if s[n] is ``1" and $1<=s[n+1]<=9$}\\
            f(s[n+2:]) & \text{if s[n] is ``1" and s[n+1] is ``0"}\\
            f(s[n+1:]) + f(s[n+2:]) & \text{if s[n] is ``2'' and
            $1<=s[n+1]<=6$}\\
            f(s[n+2:]) & \text{if s[n] is ``2" and s[n+1] is ``0"}\\
            f(s[n+1:]) & \text{otherwise}
           \end{cases}
\end{equation}

\subsection{Boundary condition}
If $n >= len(s) - 1$, then $f(s[n:]) = 1$.

\subsection{Error condition}
if s[n:] does not starts with ``[1-9]", then $f(s[n:]) = 0$.

\subsection{implementation}
Now, let's implement function [[f]].
<<Define f function>>=
func f(s []rune, n int) int {
    if n < len(s) && (s[n] < '1' || s[n] > '9') {
        return 0
    } else if n >= len(s) -1 {
        return 1
    } else {
        if s[n] == '1' {
            if s[n+1] == '0' {
                return f(s, n+2)
            } else {
                return f(s, n+1) + f(s, n+2)
            }
        } else if s[n] == '2' {
            if s[n+1] >= '1' && s[n+1] <= '6' {
                return f(s, n+1) + f(s, n+2)
            } else if s[n+1] == '0' {
                return f(s, n+2)
            } else {
                return f(s, n+1)
            }
        } else {
            return f(s, n+1)
        }
    }
}