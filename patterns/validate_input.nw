\documentclass{article}
\usepackage{noweb}
\noweboptions{smallcode}
\usepackage{graphicx}
\usepackage{float}
\usepackage{fancybox}
\pagestyle{noweb}
\begin{document}
@

\section{Problem description}
Check whether an input string is valid. A lot of problems require that the
input string conform to certain format. You task is to check whether an input
string is valid according to the format description.

Usually, the format description divides an input string into several parts, with
each part conform to a certain format rule. For example, a valid number string
is a string with possible leading whitespaces, and followed by a optional '+' or
'-' sign, followed by sequence of digits (the first digit must be nonzero), and
followed by any other sequence of characters (ignored) with the first character
being a non-digit, e.g, `` \t+123abc'' is a valid number string, whereas ``
+-1234'' is not.

\section{Pattern}
Suppose the input string is stored in a character array or a object of a string
class which supports accessing the character by its index. The general idea is
to write a function to consume the characters in each part. The function takes
the input string [[str]], the length of the string [[len]], and the starting
index [[start]] of the corresponding part as the
parameters, and returns the starting index of the next part when there is no format
issue, and -1 otherwise.
The function check whether there is any format issue by examining every
character starting from the index until it encounters a character that dose not
belong to the corresponding part. If everything is OK, then it returns the index
(could be [[len]])
of the character that does not belong to this part, otherwise it returns -1. If the part is optional, and
[[start == len]] or the character at the starting index does not belong to the part, it just returns
[[start]] and be done.

For example, to check a valid number string, we can write the following functions
for each part.
<<check valid number string>>=
int CheckWhitespace(const char *str, int len, int start)
{
  for (int i = start; i < len; i++) {
    if (str[i] != ' ' && str[i] != '\t') return i;
  }
  return len;
}
@ %def CheckWhitespace
Function [[CheckWhitespace]] scans the character from index [[start]], and return
the index (could be [[len]]) for the fist character which is not a whitespace.
<<check valid number string>>=
int CheckSign(const char *str, int len, int start)
{
  if (start == len) return start;
  if (str[start] != '+' && str[start] != '-') return start;
  else return start + 1;
}
@ %def CheckSign
Function [[CheckSign]] checks whether there is a sign at the index [[start]].
Since the sign is optional, we can just return [[start]] if there is no sign at
the index [[start]] or [[start == len]], otherwise we return start + 1, i.e, the
index of the next character which does not belong to this part,  since there is
at most one sign character.
<<check valid number string>>=
int CheckNum(const char *str, int len, int start)
{
  if (start == len) return -1; // we need at least one digit
  if ((str[start] - '0') <= 1 || (str[start] - '0') >= 9) return -1; // the first digit is in [1-9]
  for (int i = start + 1; i < len; i++) {
    if(!isdigit(str[i])) return i;
  }
  return len;
}
@ %def CheckNum
Function [[CheckNum]] checks whether there is at least one digit in [1-9]
starting at [[start]]. If yes, it returns the index (could be [[len]]) of the
character that is not a digit.
<<check valid number string>>=
int CheckInput(const char *str, int len)
{
  int start = 0;
  if ((start = CheckWhitespace(str, len, start)) == -1) return -1;
  if ((start = CheckSign(str, len, start )) == -1) return -1;
  if ((start = CheckNum(str, len, start)) = =-1) return -1;
  return 0
}
@ %def CheckInput
Function [[CheckInput]] checks whether an input conforms to the format
specification for a number string. From left to right, it checks possible leading whitespaces,
a possible sign, and number digits in turn. It returns -1 on error, and 0 on
success.

This organization of the code is similar to a recursive descent parser where to
parse a certain non-terminal on the left of the production, we have to parse
every constituent non-terminals on the right of the production. Here, the input
string is the non-terminal on the left of the production, and the parts divided
by the format specification are the non-terminals on the right of the
production.

We will talk about the recursive descent parser as a bonus lesson. It is used to
parse/validate much more complex format specifications called grammars and is unlike to 
be encountered in an interview question.

\section{Alternative Pattern}
As you may be already aware, the format specification we talked about earlier
can also be described by a regular expression, something like this

\textbf{[ {\textbackslash}t]*[+-]*[1-9][0-9]*.*}

So we can use the technique for parsing a regular expression to validate an input
string.

A regular expression can be treated as a set of states with state transitions
among them. For the above regular expression, the state transition diagram is as
follows.

With this diagram at hand, it is easy to write a program to validate an input
string.
<<check valid number string>>=
int CheckInputByRegex(const char *str, int len)
{
  int state = 1;
  for (int i = 0; i < len; i++) {
    switch (state)
    {
      case 1:
      {
        if (str[i] == ' ' || str[i] == '\t') {
          state = 1;
        } else if (str[i] == '+' || str[i] == '-'){
          state = 2;
        } else if ((str[i] - '0') >= 1 && (str[i] - '0') <=9) {
          state = 3;
        } else {
          return -1;          
        }
        break;
      }
      case 2:
      {
        if ((str[i] - '0') >= 1 && (str[i] - '0') <=9) {
          state = 3;
        } else {
          return -1;
        }
        break;
      }
      case 3:
      {
        return 0;
      }
    }
  }
  return -1;
}
@ %def CheckInputByRegex
Function [[CheckInputByRegex]] simulates the state transition diagram. Starting
from the initial state 1, the state changes when examining a new input
character. Once the state reaches the accept state 3, we return 0, otherwise we
return -1.

@
\end{document}

