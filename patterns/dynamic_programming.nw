\documentclass{article}
\usepackage{noweb}
\noweboptions{smallcode}
\usepackage{graphicx}
\usepackage{float}
\usepackage{fancybox}
\pagestyle{noweb}
\begin{document}
@

\section{Problem description}
Use dynamic programming to solve certain problems.

\section{Pattern}
<<dynamic_programming>>=
#include <unordered_map>
#include <utility>

template <class SubProblemType, class SolverType,
          class Hash = std::hash<SubProblemType>,
          class KeyEqual = std::equal_to<SubProblemType>, int SIZE = 10000>
class DynamicProgramming {
 public:
  using DPType =
      DynamicProgramming<SubProblemType, SolverType, Hash, KeyEqual, SIZE>;
  using RetType = decltype(SolverType()(std::declval<SubProblemType>()));

  friend struct WrapperSolver;
  struct WrapperSolver {
    WrapperSolver(DPType &prog, SolverType &solver)
        : _prog(prog), _solver(solver) {}

    RetType operator()(const SubProblemType &prob) {
      if (_prog._cache.find(prob) != _prog._cache.end())
        return _prog._cache[prob];
      RetType ret = _solver(prob);
      _prog._cache[prob] = ret;
      return ret;
    }

    DPType &_prog;
    SolverType &_solver;
  };

  DynamicProgramming() : _cache(SIZE) {}
  void SetSolver(const SolverType &solver) { _solver = solver; }
  RetType Solve(const SubProblemType &prob) {
    return WrapperSolver(*this, _solver)(prob);
  }

 private:
  SolverType _solver;
  std::unordered_map<SubProblemType, RetType, Hash, KeyEqual> _cache;
};

\section{Example}
<<example>>=
class Solution
{
public:
  int longestValidParentheses(string s)
  {
    DynamicProgramming<int, std::function<int(int)>> dp;

    auto solver = [&](int i) {
      if (i <= 0) return 0;
      if (s[i] == '(') return 0;
      if (i - 1 >= 0 && s[i] == ')' && s[i - 1] == '(')
      return dp.Solve(i - 2) + 2;
      if (i - 1 >= 0 && s[i] == ')' && s[i - 1] == ')') {
        if (i - dp.Solve(i - 1) - 1 >= 0 && s[i - dp.Solve(i - 1) - 1] == '(') {
          return dp.Solve(i - 1) + 2 + dp.Solve(i - dp.Solve(i - 1) - 2);
        }
        return 0;
      }
      return 0;
    };

    dp.SetSolver(solver);

    int maxLen = 0;
    for (int i = 0; i < s.size(); i++) {
      maxLen = (maxLen >= dp.Solve(i) ? maxLen : dp.Solve(i));
    }
    
    return maxLen;
  }
};


@
\end{document}

