\documentclass{article}
\usepackage{noweb}
\noweboptions{smallcode}
\usepackage{graphicx}
\usepackage{float}
\usepackage{fancybox}
\pagestyle{noweb}
\begin{document}
@

\section{Problem description}
Design a general framework for backtracing pattern. The backtracing pattern is a
trial-and-error pattern that tries to explore the whole solution space.

\section{Pattern}
Backtracing can be done by using a stack which stores the steps in the solution
space we have explored at the moment. For a possible next step, we push it onto
the stack, and continue exploration. If all possible next steps from the current
step are explored, we
pop the current step from the stack, and try to explore a next step from the
step currently at the top of the stack after the pop.

Backtracing is best explained by an analogy to exploring a maze.

One key component of the backtracing is that every step on the stack is
associated with a state. Let's suppose the current step on the top of the stack
is \textbf{A}, and the state associated with it is \textbf{$state_A$}. This
state may be changed after we choose a possible next step \textbf{B} to
\textbf{$'state_A$}. After we  push the new step \textbf{B} onto the stack, we
create a new state \textbf{$state_B$} associated with step \textbf{B}. Now we have
state \textbf{$'state_A$} associated with step \textbf{A} and state
\textbf{$state_B$} associated with step \textbf{B}, with state
\textbf{$state_B$} being the current state. After we finish exploring
all the steps from step \textbf{B}, we backtrace to step \textbf{A}, and the
state \textbf{$'state_A$} should be restored to the current state.

For example, when exploring a maze, we want to maintain the number of meters we
have taken so far. For intersection \textbf{A}, this value is stored in the state
\textbf{$state_A$}. After we push intersection \textbf{B} on to the stack, we create
state \textbf{$state_B$} which stores the meters we take to reach \textbf{B}.
This value is calculated from state \textbf{$state_A$} plus the meters we take
from intersection \textbf{A} to intersection \textbf{B}. Note that in this case,
we don't change state \textbf{$state_A$} to state \textbf{$'state_A$}.
Also please note that not every backtracing problem needs a state associated with
a step.

<<backtracing>>=
#include <functional>
#include <optional>
#include <queue>
#include <stack>
#include <tuple>
#include <unordered_set>

enum class Action {
  CONTINUE,
  TERMINATE
};

template <class StepType, class Hash = std::hash<StepType>, class KeyEqual =
std::equal_to<StepType>, int SIZE=1000>
class DFSBacktracing
{
public:
  using StepFunc = std::function<std::optional<StepType>(StepType
  &curStep, Action &act)>;
  DFSBacktracing(const StepFunc &func): _stepFunc(func), _visited(SIZE) {}  
  
  void Run(const StepType &init_step)
  {
    _stepStack.push(init_step);

    while(!_stepStack.empty()) {
      Action act = Action::CONTINUE;
      auto next = _stepFunc(_stepStack.top(), act);
      _visited.insert(_stepStack.top());
      if (act == Action::TERMINATE) break;
      if (!next) { _visited.erase(_stepStack.top());  _stepStack.pop(); continue; }
      if (_visited.find(*next) != _visited.end()) continue;
      _stepStack.push(*next);
    }
  }

private:
  StepFunc                                     _stepFunc;
  std::stack<StepType>                         _stepStack;
  std::unordered_set<StepType, Hash, KeyEqual> _visited;
};

@
The above algorithm uses DFS (depth first search) to search the
solution space. Another way is to use BFS (Breath first search) to search the
solution space. Compare to DFS, BFS is slower to find one solution, but is able
to find the solution with the minimum steps.
<<backtracing>>=
template <class StepType, class Hash = std::hash<StepType>, class KeyEqual =
std::equal_to<StepType>, int SIZE=1000>
class BFSBacktracing
{
public:
  using StepFunc = std::function<std::optional<vector<StepType>>\
                       (StepType &curStep, Action &act)>;
  BFSBacktracing(const StepFunc &func): _stepFunc(func), _visited(SIZE) {}  

  void Run(const StepType &init_step)
  {
    _stepQ.push(init_step);

    while(!_stepQ.empty()) {
      Action act = CONTINUE;
      auto next = _stepFunc(, _stepQ.front(), act);
      _visited.insert(_stepQ.front());
      if (act == Action::TERMINATE) break;
      if (!next) { _visited.erase(_stepQ.front()); _stepQ.pop(); continue; }
      for (const auto &step : *next) {
        if (_visited.find(step) != _visited.end()) continue;
        _stepQ.push(step);
      }
    }
  }

private:
  StepFunc                                     _stepFunc;
  std::queue<StepType>                         _stepQ;
  std::unordered_set<StepType, Hash, KeyEqual> _visited;
};

@
\section{Example}
Sudoku solver. 

<<example>>=
class Solution {
 public:
  enum DIRECTION { UP, RIGHT, DOWN, LEFT, NONE };

  struct Step {
    int i, j;

    DIRECTION dir;
    vector<bool> conflicts;
    bool firstEncounter;
    bool fixed;
  };

  struct StepHash {
    size_t operator()(const Step &step) const {
      return std::hash<string>()(to_string(step.i) + "-" + to_string(step.j));
    }
  };

  struct StepEqual {
    bool operator()(const Step &step1, const Step &step2) const {
      return step1.i == step2.i && step1.j == step2.j;
    }
  };

  DIRECTION nextDir(int i, int j, DIRECTION preDir, int nrows, int ncols) {
    if (j == ncols - 1 && i < nrows - 1 && preDir == DIRECTION::RIGHT) {
      return DIRECTION::DOWN;
    } else if (j == ncols - 1 && preDir == DIRECTION::DOWN) {
      return DIRECTION::LEFT;
    } else if (j == 0 && preDir == DIRECTION::LEFT && i < nrows - 1) {
      return DIRECTION::DOWN;
    } else if (j == 0 && preDir == DIRECTION::DOWN) {
      return DIRECTION::RIGHT;
    } else if (j < ncols - 1 && preDir == DIRECTION::RIGHT) {
      return DIRECTION::RIGHT;
    } else if (j > 0 && preDir == DIRECTION::LEFT) {
      return DIRECTION::LEFT;
    }
    return DIRECTION::NONE;
  }

  void solveSudoku(vector<vector<int>> &board) {
    int nrows = board.size();
    int ncols = board[0].size();

    auto stepFunc = [&](Step &curStep, Action &act) {
      if (curStep.firstEncounter) {
        curStep.firstEncounter = false;
        if (board[curStep.i][curStep.j] == 0) {
          curStep.fixed = false;
          for (int j = 0; j < ncols; j++) {
            curStep.conflicts[board[curStep.i][j]] = true;
          }
          for (int i = 0; i < nrows; i++) {
            curStep.conflicts[board[i][curStep.j]] = true;
          }
          int corneri = curStep.i / 3 * 3;
          int cornerj = curStep.j / 3 * 3;
          for (int i = corneri; i < corneri + 3; i++) {
            for (int j = cornerj; j < cornerj + 3; j++) {
              curStep.conflicts[board[i][j]] = true;
            }
          }
        } else {
          curStep.fixed = true;
        }
      } else {
        if (curStep.fixed) {
          return optional<Step>();
        }
      }

      if (!curStep.fixed) {
        bool updated = false;
        for (int i = 1; i < curStep.conflicts.size(); i++) {
          if (curStep.conflicts[i] == false) {
            board[curStep.i][curStep.j] = i;
            curStep.conflicts[i] = true;
            updated = true;
            break;
          }
        }
        if (!updated) {
          board[curStep.i][curStep.j] = 0;
          return optional<Step>();
        }
      }

      if (curStep.dir == DIRECTION::NONE) {
        act = Action::TERMINATE;
        return optional<Step>();
      }

      int nexti, nextj;
      if (curStep.dir == DIRECTION::LEFT) {
        nexti = curStep.i;
        nextj = curStep.j - 1;
      } else if (curStep.dir == DIRECTION::DOWN) {
        nexti = curStep.i + 1;
        nextj = curStep.j;
      } else if (curStep.dir == DIRECTION::RIGHT) {
        nexti = curStep.i;
        nextj = curStep.j + 1;
      }
      DIRECTION nDir;
      Step nextStep = {nexti,
                       nextj,
                       nDir = nextDir(nexti, nextj, curStep.dir, nrows, ncols),
                       vector<bool>(10),
                       true,
                       false};
      return optional<Step>(std::move(nextStep));
    };

    DFSBacktracing<Step, StepHash, StepEqual> dfs(stepFunc);
    dfs.Run({0, 0, DIRECTION::RIGHT, vector<bool>(10), true, false});
  }
};

int main() {
  vector<vector<int>> board = {
      {5, 3, 0, 0, 0, 0, 0, 0, 0}, {6, 0, 0, 1, 9, 5, 0, 0, 0},
      {0, 9, 8, 0, 0, 0, 0, 6, 0}, {8, 0, 0, 0, 6, 0, 0, 0, 3},
      {4, 0, 0, 8, 0, 3, 0, 0, 1}, {7, 0, 0, 0, 2, 0, 0, 0, 6},
      {0, 6, 0, 0, 0, 0, 2, 8, 0}, {0, 0, 0, 4, 1, 9, 0, 0, 5},
      {0, 0, 0, 0, 8, 0, 0, 7, 9}};
  Solution().solveSudoku(board);

  for (const auto &vec : board) {
    for (auto n : vec) {
      cout << n << ", ";
    }
    cout << endl;
  }
}

@
\end{document}

